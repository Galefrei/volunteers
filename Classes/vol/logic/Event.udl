Class vol.logic.Event Extends %Persistent
{

ClassMethod Create(obj As %DynamicObject)
{
	set event = ##class(vol.dal.Event).Create()
	do ..Transform(obj, .event)
	do ##class(vol.dal.Event).Save(event)
}

ClassMethod Transform(obj As %DynamicObject, ByRef event As vol.data.Event)
{
		set event.Name = $ZCONVERT(obj.name, "I", "UTF8")
	  	set event.BeginDate = $ZCONVERT(obj.begin, "I", "UTF8")
	  	set event.EndDate = $ZCONVERT(obj.end, "I", "UTF8")
	  	set event.DescriptionEvent = $ZCONVERT(data.description, "I", "UTF8") 
	   	set event.CityEvent = ##class(vol.data.City).%OpenId(obj.city.id)
	   	set event.OrganizerEvent = ##class(vol.data.Organizer).%OpenId(obj.organizer.id)
		set event.OrganizationEvent = event.OrganizerEvent.Organization
}

Storage Default
{
<Data name="EventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
<DataLocation>^vol.logic.EventD</DataLocation>
<DefaultData>EventDefaultData</DefaultData>
<IdLocation>^vol.logic.EventD</IdLocation>
<IndexLocation>^vol.logic.EventI</IndexLocation>
<StreamLocation>^vol.logic.EventS</StreamLocation>
<Type>%Library.CacheStorage</Type>
}

}

